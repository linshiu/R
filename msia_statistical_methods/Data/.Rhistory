data.frame(cp_model)
table(cp_model)
cat("best cp model:\n",data.frame(cp_model),"\n")
print("best cp model:")
print(cp_model)
cp_f = paste(colnames(model.frame(f,data))[1],paste(cp_model[-1],sep="+",collapse="+"),sep="~")
adjr2_f = paste(colnames(model.frame(f,data))[1],paste(adjr2_model[-1],sep="+",collapse="+"),sep="~")
aic_f = paste(colnames(model.frame(f,data))[1],paste(aic_model[-1],sep="+",collapse="+"),sep="~")
bic_f = paste(colnames(model.frame(f,data))[1],paste(bic_model[-1],sep="+",collapse="+"),sep="~")
cp_f = as.formula(paste(colnames(model.frame(f,data))[1],paste(cp_model[-1],sep="+",collapse="+"),sep="~"))
adjr2_f = as.formula(paste(colnames(model.frame(f,data))[1],paste(adjr2_model[-1],sep="+",collapse="+"),sep="~"))
aic_f = as.formula(paste(colnames(model.frame(f,data))[1],paste(aic_model[-1],sep="+",collapse="+"),sep="~"))
bic_f = as.formula(paste(colnames(model.frame(f,data))[1],paste(bic_model[-1],sep="+",collapse="+"),sep="~"))
cp_f
lm(f,data)
# Start from cleaned data
# Setup ##########################################################################
# Aginity
# main = "\\\\nas1/labuser169"
# course = "MSIA401_Project"
# setwd(file.path(main,course))
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
course = "MSIA_401_Statistical Methods for Data Mining"
datafolder = "Project"
setwd(file.path(main,course, datafolder))
#opts_knit$set(root.dir = getwd())
# Import data
# filename = "catalog+sales+data+for+2014+project.csv"
filename = "Catalog1.csv"
Catalog1= read.csv(filename,header = T)
# Create Training and test log and lm ###############################################
Catalog.train = Catalog1[Catalog1$train==1,]
Catalog.test = Catalog1[Catalog1$train==0,]
keepColumns = c("slstyr", "slslyr", "sls2ago", "sls3ago", "slshist", "ordtyr", "ordlyr",
"ord2ago", "ord3ago", "falord", "sprord", "ordhist1", "falord_bin",
"ordtyr_bin", "ordlyr_bin" , "ord2ago_bin", "ord3ago_bin", "yrs_since_lp",
"yrs_since_add", "targdol_bin"   )
Catalog.log.train =Catalog.train[keepColumns]
Catalog.log.test = Catalog.test[keepColumns]
keepColumns2 = c("slstyr", "slslyr", "sls2ago", "sls3ago", "slshist", "ordtyr", "ordlyr",
"ord2ago", "ord3ago", "falord", "sprord", "ordhist1", "falord_bin",
"ordtyr_bin", "ordlyr_bin" , "ord2ago_bin", "ord3ago_bin", "yrs_since_lp",
"yrs_since_add", "targdol_pur"   )
Catalog.lm.train = Catalog.train[keepColumns2]
Catalog.lm.train = Catalog.lm.train[!is.na(Catalog.lm.train$targdol_pur),]
Catalog.lm.test = Catalog.test[keepColumns2]
# should we keep only people that bought?
Catalog.lm.test = Catalog.lm.test[!is.na(Catalog.lm.test$targdol_pur),]
f=log10(targdol_pur+1) ~ sqrt(falord) + sqrt(sprord) +
falord_bin + ordtyr_bin + ordlyr_bin + ord2ago_bin + ord3ago_bin +
log10(slshist + 1) + log10(slstyr + 1) + log10(slslyr + 1) +
log10(sls2ago + 1) + log10(sls3ago + 1) + log10(slstyr * slslyr + 1) +
log10(slstyr * slslyr * sls2ago + 1) + log10(slslyr*sls2ago+1) +
log10(slslyr*sls2ago*sls3ago+1) + log10(sls2ago*sls3ago+1) +
I(log10(slshist+1)/sqrt(yrs_since_add + 1)) +
I(log10(slshist+1)/sqrt(yrs_since_lp+1))
source("ModelSelection.R")
lm_select = regsubsetsF2(f,Catalog.lm.train)
lm_select = regsubsetsF2(f,Catalog.lm.train)
lm_select
source("ModelSelection.R")
lm_select = regsubsetsF2(f,Catalog.lm.train)
source("ModelSelection.R")
lm_select = regsubsetsF2(f,Catalog.lm.train)
lm_select = regsubsetsF2(f,Catalog.lm.train)
test = bestGLM_gaussian(f,Catalog.lm.train)
source("ModelSelection.R")
lm_select = regsubsetsF2(f,Catalog.lm.train)
source("ModelSelection.R")
lm_select = regsubsetsF2(f,Catalog.lm.train)
source("ModelSelection.R")
lm_select = regsubsetsF2(f,Catalog.lm.train)
source("ModelSelection.R")
lm_select = regsubsetsF2(f,Catalog.lm.train)
names(lm_select)
source("ModelSelection.R")
lm_select2 = glmulti_gaussian(f,Catalog.lm.train)
?bestglm
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_401_Statistical Methods for Data Mining"
datafolder = "Data"
setwd(file.path(main,course, datafolder))
filename = "P014.txt"
mydata = read.table(filename,header = T)
# Look at data
names(mydata)
head(mydata)
nrow(mydata)
summary(mydata)
n=dim(mydata)[1]
library(pROC)
fit1 =  glm(RURAL ~ NSAL, family=binomial(link="logit"), data=mydata)
fit2  = glm(RURAL ~ MCDAYS+NSAL+TDAYS, family=binomial(link="logit"), data=mydata)
rocobj1= plot.roc(mydata2$RURAL,
fit1$fitted.values, percent = TRUE,col="#1c61b6")
rocobj2= plot.roc(mydata2$RURAL,fit2$fitted.values,
add=T, percent = TRUE,col="#008600")# T = don't erase previous grap
legend("bottomright", legend=c("NSAL", "NSAL+MCDAYS+TDAYS"),
col=c("#1c61b6", "#008600"), lwd=2, inset=0.05,cex=0.75)
testobj = roc.test(rocobj1, rocobj2)
text(50, 50, labels=paste("p-value =", format.pval(testobj$p.value)), adj=c(0, .5))
mydata2 = within(mydata,{
NETREV = NULL
})
# roc = area under curve = predicted power of model
# adding extra predictors better, but not adding interaction
fit1 =  glm(RURAL ~ NSAL, family=binomial(link="logit"), data=mydata)
fit2  = glm(RURAL ~ MCDAYS+NSAL+TDAYS, family=binomial(link="logit"), data=mydata)
rocobj1= plot.roc(mydata2$RURAL,
fit1$fitted.values, percent = TRUE,col="#1c61b6")
rocobj2= plot.roc(mydata2$RURAL,fit2$fitted.values,
add=T, percent = TRUE,col="#008600")# T = don't erase previous grap
legend("bottomright", legend=c("NSAL", "NSAL+MCDAYS+TDAYS"),
col=c("#1c61b6", "#008600"), lwd=2, inset=0.05,cex=0.75)
testobj = roc.test(rocobj1, rocobj2)
text(50, 50, labels=paste("p-value =", format.pval(testobj$p.value)), adj=c(0, .5))
f=RURAL~.
head(mydata2)
lr_select = bestglm_binomial(f,mydata2)
source("ModelSelection.R")
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ModelSelection.R")
lr_select = bestglm_binomial(f,mydata2)
lr_select
lr_select2 = glmulti_binomial(f,mydata2)
f1=RURAL~NSAL
roc1 = roc(formula=f1,data=mydata2)
plot.roc(roc1)
mydata2
roc1 = roc(formula=f1,data=mydata2)
plot.roc(roc1)
plot(roc1)
class(f)
roc1 = do.call("roc",list(formula=f1,data=mydata2))
plot(roc1)
plot(roc1)
roc1 = do.call("roc",list(formula=f1,data=quote(mydata2))
)
plot(roc1)
?quote
roc1 = roc(formula=f1,data=quote(mydata2)
)
fit1 = glm(formula=f1,data=mydata2)
roc1 = do.call("roc",list(formula=f1,data=quote(mydata2),auc=TRUE,percent=TRUE)
)
plot(roc1)
roc1 = do.call("roc",list(formula=f1,data=quote(mydata2),auc=TRUE,percent=TRUE,plot=TRUE))
plot(roc1,print.auc=TRUE)
auc(roc1)
class(auc(roc1))
names(auc(roc1))
as.numeric(auc(roc1))
f2=RURAL ~ MCDAYS+NSAL+TDAYS
roc2 = roc(formula=f2,data=mydata2)
roc2 = do.call("roc",list(formula=f1,data=quote(mydata2),auc=TRUE,percent=TRUE)
roc1 = roc(formula=f1,data=mydata2)
roc1 = do.call("roc",list(formula=f1,data=quote(mydata2),auc=TRUE,percent=TRUE))
roc2 = roc(formula=f2,data=mydata2)
roc2 = do.call("roc",list(formula=f1,data=quote(mydata2),auc=TRUE,percent=TRUE))
plot(roc1,col="#1c61b6")
auc(roc1)
auc(roc2)
testobj = roc.test(roc1, roc2)
testobj
roc2 = roc(formula=f2,data=mydata2)
roc2 = do.call("roc",list(formula=f2,data=quote(mydata2),auc=TRUE,percent=TRUE
auc(roc1)
auc(roc2)
testobj = roc.test(roc1, roc2)
f1=RURAL~NSAL
f2=RURAL ~ MCDAYS+NSAL+TDAYS
# http://www.vsni.co.uk/forum/viewtopic.php?p=4188
roc1 = roc(formula=f1,data=mydata2)
roc1 = do.call("roc",list(formula=f1,data=quote(mydata2),auc=TRUE,percent=TRUE))
roc2 = roc(formula=f2,data=mydata2)
roc2 = do.call("roc",list(formula=f2,data=quote(mydata2),auc=TRUE,percent=TRUE))
auc(roc1)
auc(roc2)
roc2
roc1
roc2 = do.call("roc",list(formula=as.formula(f2),data=quote(mydata2),auc=TRUE,percent=TRUE))
roc2
roc2 = roc(formula=f2,data=mydata2)
roc2 = do.call("roc",list(formula=quote(f2),data=quote(mydata2),auc=TRUE,percent=TRUE))
roc2
roc1
roc1 = roc(formula=f1,data=mydata2)
roc1
roc2 = roc(formula=f2,data=mydata2)
auc(roc2)
model.frame(f1,mydat2)
h=model.frame(f1,mydata2)
h
mydata
fit1 = glm(f1, family=binomial(link="logit"), data=mydata2)
fit1
fit2 = glm(f2, family=binomial(link="logit"), data=mydata2)
h[1]
roc1(h[1],fit1$fitted)
roc1=roc(h[1],fit1$fitted)
length(h[1])
length(h[,1])
h[,1]
roc1=roc(h[,1],fit1$fitted)
plot(roc1,col="#1c61b6")
roc1=roc(h[,1],fit1$fitted,percent=TRUE)
plot(roc1,col="#1c61b6")
plot(roc1,col="#1c61b6",ylim=100)
plot(roc1,col="#1c61b6",ylim=c(100)
)
plot(roc1,col="#1c61b6",ylim=c(0,100))
response1 = model.frame(f1,mydata2)[,1]
roc1=roc(response1,fit1$fitted,percent=TRUE)
f1=RURAL~NSAL
f2=RURAL ~ MCDAYS+NSAL+TDAYS
fit1 = glm(f1, family=binomial(link="logit"), data=mydata2)
fit2 = glm(f2, family=binomial(link="logit"), data=mydata2)
response1 = model.frame(f1,mydata2)[,1]
response2 = model.frame(f2,mydata2)[,1]
roc1=roc(response1,fit1$fitted,percent=TRUE)
roc2=roc(response2,fit2$fitted,percent=TRUE)
plot(roc1,col="#1c61b6")
plot(roc1,col="#008600",add=T) # T = don't erase previous grap
fit1 = glm(f1, family=binomial(link="logit"), data=mydata2)
fit2 = glm(f2, family=binomial(link="logit"), data=mydata2)
response1 = model.frame(f1,mydata2)[,1]
response2 = model.frame(f2,mydata2)[,1]
roc1=roc(response1,fit1$fitted,percent=TRUE)
roc2=roc(response2,fit2$fitted,percent=TRUE)
plot(roc1,col="#1c61b6")
plot(roc2,col="#008600",add=T) # T = don't erase previous grap
legend("bottomright", legend=c("fit1", "fit2"),
col=c("#1c61b6", "#008600"), lwd=2, inset=0.05,cex=0.75)
testobj
auc(roc1)
auc(roc2)
testobj = roc.test(roc1, roc2)
testobj
leg = as.numeric(auc(roc1))
leg
leg = round(as.numeric(auc(roc1),2)
)
leg
leg = round(as.numeric(auc(roc1),3))
leg =
leg = round(as.numeric(auc(roc1),3))
leg
format(round(as.numeric(auc(roc1), 2), nsmall=2)
)
round(as.numeric(auc(roc1),4)
)
signif(as.numeric(auc(roc1),digits=3)
)
cat("fit1",signif(as.numeric(auc(roc1),digits=2)))
cat("fit1",signif(as.numeric(auc(roc1),digits=2)),"%")
cat("fit1: auc=",signif(as.numeric(auc(roc1),digits=2)),"%")
plot(roc1,col="#1c61b6")
plot(roc2,col="#008600",add=T) # T = don't erase previous grap
legend1 = cat("fit1: auc=",signif(as.numeric(auc(roc1),digits=2)),"%")
legend3 = cat("fit2: auc=",signif(as.numeric(auc(roc3),digits=2)),"%")
legend2 = cat("fit2: auc=",signif(as.numeric(auc(roc2),digits=2)),"%")
legend("bottomright", legend=c(legend1, legend2),
col=c("#1c61b6", "#008600"), lwd=2, inset=0.05,cex=0.75)
class(legend1)
legend1
legend1 = cat("fit1: auc=",signif(as.numeric(auc(roc1),digits=2)),"%")
legend1
legend1 = as.string(cat("fit1: auc=",signif(as.numeric(auc(roc1),digits=2)),"%"))
legend1 = paste("fit1: auc=",signif(as.numeric(auc(roc1),digits=2)),"%")
legend1
legend1 = paste("fit1: auc=",signif(as.numeric(auc(roc1),digits=2)),"%")
legend2 = paste("fit2: auc=",signif(as.numeric(auc(roc2),digits=2)),"%")
legend("bottomright", legend=c(legend1, legend2),
col=c("#1c61b6", "#008600"), lwd=2, inset=0.05,cex=0.75)
legend1 = paste("fit1: auc=",fixed(as.numeric(auc(roc1),digits=2)),"%")
legend2 = paste("fit2: auc=",fixed(as.numeric(auc(roc2),digits=2)),"%")
format(as.numeric(auc(roc1),digits=2), digits=2, nsmall=2)
legend1 = paste("fit1: auc=",format(as.numeric(auc(roc1),digits=2), digits=2, nsmall=2),"%")
legend2 = paste("fit2: auc=",format(as.numeric(auc(roc1),digits=2), digits=2, nsmall=2),"%")
plot(roc1,col="#1c61b6")
plot(roc2,col="#008600",add=T) # T = don't erase previous grap
legend("bottomright", legend=c(legend1, legend2),
col=c("#1c61b6", "#008600"), lwd=2, inset=0.05,cex=0.75)
text(50, 50, labels=paste("p-value =", format.pval(testobj$p.value)), adj=c(0, .5))
source(ROC)
source("ROC")
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ROC.R")
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ROC.R")
plotROC2(f1,f2,mydata2)
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ROC.R")
plotROC1(f1,mydata2)
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_401_Statistical Methods for Data Mining"
datafolder = "Data"
setwd(file.path(main,course, datafolder))
var_names = c("taxes","bath","lot","living","garage","rooms","bedrooms","age",
"fireplaces","sale")
predictor_names = c("intercept","taxes","bath","lot","living","garage","rooms","bedrooms","age",
"fireplaces")
# Import data
filename = "P329.txt"
mydata = read.table(filename,header =T)
colnames(mydata)=var_names
########################
# Import data
filename = "P256.txt"
mydata = read.table(filename, header = T)
f1=RURAL~NSAL
f2=RURAL ~ MCDAYS+NSAL+TDAYS
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ROC.R")
plotROC2(f1,f2,mydata2)
mydata2 = within(mydata,{
NETREV = NULL
})
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ROC.R")
plotROC2(f1,f2,mydata2)
mydata2
# Import data
filename = "P256.txt"
mydata = read.table(filename, header = T)
# Look at data
names(mydata)
head(mydata)
nrow(mydata)
summary(mydata)
# Fix names
names(mydata)[-1] = sapply(1:11, function(i) paste("X", i, sep = ""))
f1=RURAL~NSAL
f2=RURAL ~ MCDAYS+NSAL+TDAYS
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ROC.R")
plotROC2(f1,f2,mydata2)
mydata
# Import data
filename = "P014.txt"
mydata = read.table(filename,header = T)
# Look at data
names(mydata)
head(mydata)
nrow(mydata)
summary(mydata)
n=dim(mydata)[1]
mydata2 = within(mydata,{
NETREV = NULL
})
mydata2
source("C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/MSIA_401_Statistical Methods for Data Mining/Project/ROC.R")
plotROC2(f1,f2,mydata2)
plotROC1(f1,mydata2)
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_401_Statistical Methods for Data Mining"
datafolder = "Data"
setwd(file.path(main,course, datafolder))
# Import data
filename = "P128.txt"
mydata = read.table(filename,header = T)
## check the fit (check linearity assumption by plotting residuals against each predictor)
fit = lm(Y~.,mydata)
plot_vector = vector(mode="list",length=6)
plot_vector[[1]] = ggplot(mydata,aes(x=mydata[[2]], y = fit$resid)) +
geom_point(size = 3) +
labs(x = colnames(mydata[2]),y = "Residuals")
plot_vector[[2]]  = ggplot(mydata,aes(x=mydata[[3]], y = fit$resid)) +
geom_point(size = 3) +
labs(x = colnames(mydata[3]),y = "Residuals")
plot_vector[[3]]  = ggplot(mydata,aes(x=mydata[[4]], y = fit$resid)) +
geom_point(size = 3) +
labs(x = colnames(mydata[4]),y = "Residuals")
plot_vector[[4]]  = ggplot(mydata,aes(x=mydata[[5]], y = fit$resid)) +
geom_point(size = 3) +
labs(x = colnames(mydata[5]),y = "Residuals")
plot_vector[[5]]  = ggplot(mydata,aes(x=mydata[[6]], y = fit$resid)) +
geom_point(size = 3) +
labs(x = colnames(mydata[6]),y = "Residuals")
plot_vector[[6]] = ggplot(mydata,aes(x=mydata[[7]], y = fit$resid)) +
geom_point(size = 3) +
labs(x = colnames(mydata[7]),y = "Residuals")
grid.arrange(plot_vector[[1]],
plot_vector[[2]],
plot_vector[[3]],
plot_vector[[4]],
plot_vector[[5]],
plot_vector[[6]],
ncol=2, main = "Residuals vs Predictor Variables")
# All plots look random so assumptions about the form of the model
# (linear in the regression parameters) is satisfied.
library(car)
avPlots(fit)
## check normality (using qq plot)
qqPlot(fit, main = "Normal Q-Q Plot")
fit_stdres = rstandard(fit)
library(MASS)
stu_res = studres(fit)
qqnorm(fit_stdres,
ylab = "Standardized Residuals",
xlab = "Theoretical Quantiles",
main = "Normal Q-Q Plot");
qqline(fit_stdres, col="red")
ggplot(mydata,aes(x=fit$fitted, y = fit$resid)) +
geom_point(size = 3) +
labs(x = "Fitted",y = "Residuals")
corr = round(cor(mydata),2)
corr
panel.pearson <- function(x, y, ...) {
horizontal <- (par("usr")[1] + par("usr")[2]) / 2;
vertical <- (par("usr")[3] + par("usr")[4]) / 2;
text(horizontal, vertical, format(cor(x,y), digits=2))
}
pairs(mydata, main = "Correlation coeffficients matrix and scatter plot",
pch = 21, upper.panel=panel.pearson,lower.panel = panel.smooth)
par(mfrow=c(1,1))
corrplot(corr,method="number", type="upper")
pairs(mydata[,-1], main = "Correlation coeffficients matrix and scatter plot",
pch = 21, lower.panel = NULL, panel = panel.smooth,cex.labels = 3)
# Check
library(car)
vif(fit)
## Compute Leverage for measuring "unusualness" of x's
leverage =  hat(model.matrix(fit))
mydata$leverage = leverage
# Can also get the leverage using:
hatvalues(fit)
# Compute cutoff
p=6
n=dim(mydata)[1]
cutoff = 2*(p+1)/n
cutoff
# Find high leverage points
influential = mydata["leverage"]
influential = subset(influential,leverage> cutoff)
influential
# Add observation number so can plot
influential$obs = as.numeric(rownames(influential))
mydata$obs = 1:n
# Plot influential points
ggplot(mydata,aes(x=obs, leverage)) +
geom_point(size = 3, color="blue") +
geom_hline(yintercept=cutoff, linetype="dashed" , color = "red") +
geom_text(aes(35, .38, label="Influential Cutoff")) +
geom_segment(aes(xend=obs, yend=0), color="blue") +
geom_text(data =influential, aes(x=obs, y = leverage,
label = obs), hjust = -1.5) +
labs(title="Leverage ",
x = "Obs Number",
y = "Leverage") +
geom_point(data=mydata[influential$obs,], colour="red", size=5)
ggplot(mydata,aes(x=as.numeric(rownames(mydata)), leverage)) +
geom_point(size = 3, color="blue") +
geom_hline(yintercept=cutoff, linetype="dashed" , color = "red") +
geom_text(aes(35, .38, label="Influential Cutoff")) +
geom_segment(aes(xend=as.numeric(rownames(mydata)), yend=0), color="blue") +
geom_text(aes(x = as.numeric(rownames(mydata))[mydata$leverage>cutoff],
y = mydata$leverage[mydata$leverage>cutoff],
label = as.numeric(rownames(mydata))[mydata$leverage>cutoff]),hjust = -1.5)+
labs(title="Leverage ",
x = "Obs Number",
y = "Leverage")
# Cook's D plot
cutoff = 4/(dim(mydata)[1]);
plot(fit, which=4, cook.levels=cutoff, main = "Cook's D Plot");
# Cook's D plot
cutoff = 4/(dim(mydata)[1]);
plot(fit, which=4, cook.levels=cutoff, main = "Cook's D Plot");
# Can aslo get influence using:
cooks.distance(fit)
library(car)   # needed for "influencePlot" function below
influencePlot(fit)
influence.measures(fit)
summary(influence.measures(fit))
library(MASS)
stu_res = studres(fit)
mydata$stu_res = stu_res
mydata$fitted = fit$fitted
outlier = mydata["stu_res"]
outlier = subset(outlier,abs(stu_res)>2)
outlier
outlier$fitted = fit$fitted[outlier$obs]
outlier$obs = as.numeric(rownames(outlier))
ggplot(mydata,aes(x=fitted, stu_res)) +
geom_point(size = 3, color="blue") +
geom_hline(yintercept=2, linetype="dashed" , color = "red") +
geom_hline(yintercept=-2, linetype="dashed" , color = "red") +
geom_text(data =outlier, aes(x=fitted, y = stu_res,
label = obs), hjust = 1.5) +
labs(title="Outliers Check ",
x = "Fitted",
y = "Studentized Residuals") +
geom_point(data=mydata[outlier$obs,], colour="red", size=5)
outlier$obs = as.numeric(rownames(outlier))
outlier$fitted = fit$fitted[outlier$obs]
ggplot(mydata,aes(x=fitted, stu_res)) +
geom_point(size = 3, color="blue") +
geom_hline(yintercept=2, linetype="dashed" , color = "red") +
geom_hline(yintercept=-2, linetype="dashed" , color = "red") +
geom_text(data =outlier, aes(x=fitted, y = stu_res,
label = obs), hjust = 1.5) +
labs(title="Outliers Check ",
x = "Fitted",
y = "Studentized Residuals") +
geom_point(data=mydata[outlier$obs,], colour="red", size=5)
?plot.lm
fit
plot(fit)
?plot.lm
plot(fit,which=c(1:6))
