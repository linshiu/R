nCustomers1
dim(nCustomers1)
rbind(nCustomers1,colSums(sapply(price1,function(x) customer1>=x)))
nCustomers1
n = 10 # simulation runs
price1 = seq(0,1000,10)
price2 = seq(0,1000,10)
names(price1)=as.character(price1)
names(price2)=as.character(price2)
nCustomers1 = rep(0,101-50)
nCustomers2 = rep(0,101-50)
for (i in 1:n){
# random customer's maximum price willig to pay
customer1 = runif(50)*500
customer2 = runif(50)*1000
# for each price, sum the number of customer exceeding price
nCustomers1=rbind(nCustomers1,colSums(sapply(price1,function(x) customer1>=x)))
nCustomers2=rbind(nCustomers2,colSums(sapply(price2,function(x) customer2>=x)))
}
nCustomers2
# multiple # customers by price to get revenue
revenue1 = as.matrix(price*colMeans(nCustomers1))
revenue2 = as.matrix(price*colMeans(nCustomers2))
revenue = rbind(revenue1,revenue2)
evenue
revenue
revenue = revenue1 + revenue2
revenue
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
colnames(revenue)= "Revenue"
colnames(revenue1)= "Revenue"
colnames(revenue2)= "Revenue"
names(price1)[which(max(revenue1)==revenue1)]
max(revenue1)
names(price2)[which(max(revenue2)==revenue2)]
max(revenue2)
n = 100 # simulation runs
price1 = seq(0,1000,10)
price2 = seq(0,1000,10)
names(price1)=as.character(price1)
names(price2)=as.character(price2)
nCustomers1 = rep(0,101-50)
nCustomers2 = rep(0,101-50)
for (i in 1:n){
# random customer's maximum price willig to pay
customer1 = runif(50)*500
customer2 = runif(50)*1000
# for each price, sum the number of customer exceeding price
nCustomers1=rbind(nCustomers1,colSums(sapply(price1,function(x) customer1>=x)))
nCustomers2=rbind(nCustomers2,colSums(sapply(price2,function(x) customer2>=x)))
}
# multiple # customers by price to get revenue
revenue1 = as.matrix(price*colMeans(nCustomers1))
revenue2 = as.matrix(price*colMeans(nCustomers2))
revenue = revenue1 + revenue2
colnames(revenue)= "Revenue"
colnames(revenue1)= "Revenue"
colnames(revenue2)= "Revenue"
names(price1)[which(max(revenue1)==revenue1)]
max(revenue1)
names(price2)[which(max(revenue2)==revenue2)]
max(revenue2)
plot(price1,revenue1, pch=16)
plot(price2,revenue1, pch=16)
plot(price1,revenue1, pch=16)
plot(price2,revenue2, pch=16)
plot(price1,revenue1, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,10)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(800,850,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
length(nCustomers)
nCustomers = rep(0,101)
length(nCustomers)
customer = runif(100)*1000
length(customer)
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,100)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,100)
nCustomers
length(nCustomers)
customer = runif(100)*1000
length(customer)
sapply(price,function(x) customer>=x)
length(colSums(sapply(price,function(x) customer>=x))
length(colSums(sapply(price,function(x) customer>=x))
)
x=sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
length(x)
nCustomers
customer
price
length(price)
x=sapply(price,function(x) customer>=x)
length(x)
sapply(price,function(x) customer>=x)
customer
length(customer)
price
length(price)
customer>2
sapply(price,function(x) customer>=x)
x=sapply(price,function(x) customer>=x)
x[1]
View(x)
dim(x)
View(x)
colnames(x)
x[,"1000"]
colSums(sapply(price,function(x) customer>=x))
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
x=sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
dim(x)
x
length(x)
nCustomers
length(nCustomers)
nCustomers = rep(0,length(price))
length(nCustomers)
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
nCustomers
View(nCustomers)
nCustomers[1]
ronames(nCustomers)
rownames(nCustomers)
price*colMeans(nCustomers)
nCustomers[-1,]
price*colMeans(nCustomers[-1,])
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
colnames
revenue
n = 100 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
nCustomers
View(nCustomer)
View(nCustomers)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
library(rJava)
library(rJava)
4/110
48/55
37/41
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_400_Analytics for Competitive Advantage"
datafolder = "Lab/Assignment_03"
setwd(file.path(main,course, datafolder))
filename = "markov100.txt"
mydata= read.table(filename, header=F,
col.names=paste("S", 1:100, sep = ""),
row.names=paste("S", 1:100, sep = ""))
P = as.matrix(mydata)
# Look at data
names(mydata)
head(mydata)[,1:6]
nrow(mydata)
#summary(mydata)
n = dim(P)[1]
library(expm)
end = 5
a = rep(0,n)
a[1]=1
ntrans = 10
dist = a %*% (P %^% ntrans)
dist[end]
library(expm)
end = 10
a = rep(0,n)
a[c(1,2,3)]=1/3
ntrans = 10
dist = a %*% (P %^% ntrans)
dist[end]
end = 1
Q = t(P)- diag(n)
Q[n,] = rep(1,n)
rhs = rep(0,n); rhs[n]=1
Pi = solve(Q) %*% rhs
Pi[end]
start = 1
end = 100
B =P[-end,-end]
Q = diag(n-1) - B
e = rep(1,n-1)
m = solve(Q) %*% e
m[paste("S", start, sep = ""),]
m
start = 1
end = 100
B =P[-start,-start]
Q = diag(n-1) - B
e = rep(1,n-1)
m = solve(Q) %*% e
m[paste("S", end, sep = ""),]
n
B =P[2:100,2:00]
Q = diag(n-1) - B
e = rep(1,n-1)
m = solve(Q) %*% e
m
