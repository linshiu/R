n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(800,850,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
length(nCustomers)
nCustomers = rep(0,101)
length(nCustomers)
customer = runif(100)*1000
length(customer)
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,100)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,100)
nCustomers
length(nCustomers)
customer = runif(100)*1000
length(customer)
sapply(price,function(x) customer>=x)
length(colSums(sapply(price,function(x) customer>=x))
length(colSums(sapply(price,function(x) customer>=x))
)
x=sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
length(x)
nCustomers
customer
price
length(price)
x=sapply(price,function(x) customer>=x)
length(x)
sapply(price,function(x) customer>=x)
customer
length(customer)
price
length(price)
customer>2
sapply(price,function(x) customer>=x)
x=sapply(price,function(x) customer>=x)
x[1]
View(x)
dim(x)
View(x)
colnames(x)
x[,"1000"]
colSums(sapply(price,function(x) customer>=x))
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
x=sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
dim(x)
x
length(x)
nCustomers
length(nCustomers)
nCustomers = rep(0,length(price))
length(nCustomers)
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
nCustomers
View(nCustomers)
nCustomers[1]
ronames(nCustomers)
rownames(nCustomers)
price*colMeans(nCustomers)
nCustomers[-1,]
price*colMeans(nCustomers[-1,])
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
colnames
revenue
n = 100 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
nCustomers
View(nCustomer)
View(nCustomers)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
library(rJava)
library(rJava)
4/110
48/55
37/41
x = list()
x
x[1]=c("a","b")
x[[1]]=c("a","b")
x
x[[1]][1]
a1 = c(1, 2, 3, 4, 5)
a2 = c(6, 7, 8, 9, 10)
a3 = c(11, 12, 13, 14, 15)
aframe = data.frame(a1, a2, a3)
aframe
aframe[,1]
aframe[,"a1"]
aframe$a1
class(aframe[,1])
class(aframe[,"a1"])
class(aframe$a1)
aframe[["a1"]]
class(aframe[["a1"]])
aframe[[1]]
aframe[[1,1]]
aframe[[1,2]]
aframe[1,2]
x[1]
x
x[[1]]
x[1]
class(x[[1]])
class(x[1])
x[[2]]=c(1,2,3)
x
x[[2]]
class(x[[2]])
x[2]
class(x[2])
x[[3]]=2
x
P = cbind(c(.4,.2,.1),c(.6,0,0),c(0,.8,.9))
P
n = matrix(c(1000,0,0))
n
v = matrix(c(90,-10,-10))
v
t(n) %*% P
t(n) %*% P %*% P
t(n) %8% P %*% V
t(n) %*% P %*% V
t(n) %*% P %*% v
t(n) %*% P %*% P %*% v
t(n) %*% solve(diag(3)-P/1.2) %*% v
install.packages("Tabplot")
install.packages("tabplot")
install.packages("rattle")
library(rattel)
library(rattle)
rattle()
# Lab session 4 exercise
##### Load data ##############################################################
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_411_Data_Visualization"
datafolder = "/Lab/Data"
setwd(file.path(main,course, datafolder))
carsdata =read.csv("04cars data.csv",header=TRUE,
na.strings=c("","*","NA"))
library(ggplot2)
ggplot(sub, aes(x=Cyl, y=City.MPG)) +
geom_boxplot(aes(fill = Cyl))+
ggtitle("BoxPlot City.MPG by Cyl")
# shown on the same figure.
qplot(HP,Retail.Price, data = carsdata, geom =c("point","smooth"),
formula=y~poly(x,2), method="lm",main="Retail Price VS HorsePower")
sub = carsdata[(carsdata$Cyl %in% c(4,6,8)),]
sub$Cyl = factor(sub$Cyl,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
sub$Cyl = factor(sub$Cyl,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
ggplot(sub, aes(x=Cyl, y=City.MPG)) +
geom_boxplot(aes(fill = Cyl))+
ggtitle("BoxPlot City.MPG by Cyl")
# Lab session 4 exercise
##### Load data ##############################################################
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_411_Data_Visualization"
datafolder = "/Lab/Data"
setwd(file.path(main,course, datafolder))
carsdata =read.csv("04cars data.csv",header=TRUE,
na.strings=c("","*","NA"))
##### Ex1  #############################################################
library(ggplot2)
## Part a ####
# Using qplot() create a scatter plot of "HP" against "Retail.Price."
# Fit a second degree polynomial through the data, i.e. Retail.Price
# = HP2. Make sure that the datapoints and the fitted line are
# shown on the same figure.
qplot(HP,Retail.Price, data = carsdata, geom =c("point","smooth"),
formula=y~poly(x,2), method="lm",main="Retail Price VS HorsePower")
## Part b ####
# Select all the cars with 4, 6 and 8 cylinders. For each cylinder
# category regress (using "lm") "HP" on Retail.Price." In total you
# need to have three regression lines. Remove the 95% confidence
# interval around the lines.
table(carsdata$Cyl)
dim(carsdata) # 428 rows
mydata = carsdata
mydata$Cyl = factor(mydata$Cyl,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
# data points with no cyl = 4,6,8
index = which(!(carsdata$Cyl %in% c(4,6,8)))
carsdata[index,]
mydata[index,]
dim(mydata) # 428 rows
table(mydata$Cyl)
# when using factors, cyl other than 4,6 and 8 get NA, so when plotting they
# are ignored
sub = carsdata[(carsdata$Cyl %in% c(4,6,8)),]
sub$Cyl = factor(sub$Cyl,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl"))
# points that are not 4,6 and 8 are plotted in gray color
qplot(HP,Retail.Price, data = mydata,
geom = c("point","smooth"),formula=y~x, level =0, fullrange=T,
color=Cyl,method="lm",main="Retail Price VS HorsePower")
# subset data 4,6 and 8
qplot(HP,Retail.Price, data = sub,
geom = c("point","smooth"),formula=y~x, level =0, fullrange=T,
color=Cyl,method="lm",main="Retail Price VS HorsePower")
## Part c ####
# For the same subset of the data as in part (b) (cars with 4,
# 6 and 8 cylinders), use ggplot() to a create boxplot for
# "City.MPG" for all three categories.
# (The final figure should have 3 boxplots and "City.MPG" on
# the y-axis.) Give a different fill color to each boxplot.
ggplot(sub, aes(x=Cyl, y=City.MPG)) +
geom_boxplot(aes(fill = Cyl))+
ggtitle("BoxPlot City.MPG by Cyl")
head(mydata)
str(mydata)
mydata = carsdata
mydata$Sports.Car = factor(mydata$Sports.Car,levels=c(0,1),
labels=c("non-sport","sport"))
# default  = stacked
ggplot(mydata, aes(x = City.MPG)) +
geom_histogram(aes(fill=Sports.Car ),alpha = 0.5)+
ggtitle("Historgam of City.MPG")+
scale_fill_brewer(palette="Set1")
# overlayed
ggplot(mydata, aes(x=City.MPG, fill=Sports.Car)) +
geom_histogram(position="identity", alpha=0.5)+
ggtitle("Historgam of City.MPG") +
scale_fill_brewer(palette="Set1")
