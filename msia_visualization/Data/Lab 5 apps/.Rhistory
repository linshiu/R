names(price1)=as.character(price1)
names(price2)=as.character(price2)
nCustomers1 = rep(0,101-50)
nCustomers2 = rep(0,101-50)
for (i in 1:n){
# random customer's maximum price willig to pay
customer1 = runif(50)*500
customer2 = runif(50)*1000
# for each price, sum the number of customer exceeding price
nCustomers1=rbind(nCustomers1,colSums(sapply(price1,function(x) customer1>=x)))
nCustomers2=rbind(nCustomers2,colSums(sapply(price2,function(x) customer2>=x)))
}
# multiple # customers by price to get revenue
revenue1 = as.matrix(price*colMeans(nCustomers1))
revenue2 = as.matrix(price*colMeans(nCustomers2))
revenue = revenue1 + revenue2
colnames(revenue)= "Revenue"
colnames(revenue1)= "Revenue"
colnames(revenue2)= "Revenue"
names(price1)[which(max(revenue1)==revenue1)]
max(revenue1)
names(price2)[which(max(revenue2)==revenue2)]
max(revenue2)
plot(price1,revenue1, pch=16)
plot(price2,revenue1, pch=16)
plot(price1,revenue1, pch=16)
plot(price2,revenue2, pch=16)
plot(price1,revenue1, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,10)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(800,850,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,101)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
length(nCustomers)
nCustomers = rep(0,101)
length(nCustomers)
customer = runif(100)*1000
length(customer)
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,100)
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,100)
nCustomers
length(nCustomers)
customer = runif(100)*1000
length(customer)
sapply(price,function(x) customer>=x)
length(colSums(sapply(price,function(x) customer>=x))
length(colSums(sapply(price,function(x) customer>=x))
)
x=sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
length(x)
nCustomers
customer
price
length(price)
x=sapply(price,function(x) customer>=x)
length(x)
sapply(price,function(x) customer>=x)
customer
length(customer)
price
length(price)
customer>2
sapply(price,function(x) customer>=x)
x=sapply(price,function(x) customer>=x)
x[1]
View(x)
dim(x)
View(x)
colnames(x)
x[,"1000"]
colSums(sapply(price,function(x) customer>=x))
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
x=sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity))
dim(x)
x
length(x)
nCustomers
length(nCustomers)
nCustomers = rep(0,length(price))
length(nCustomers)
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
nCustomers
View(nCustomers)
nCustomers[1]
ronames(nCustomers)
rownames(nCustomers)
price*colMeans(nCustomers)
nCustomers[-1,]
price*colMeans(nCustomers[-1,])
n = 10 # simulation runs
capacity = 15
price = seq(0,1000,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
colnames
revenue
n = 100 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,900,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
nCustomers
View(nCustomer)
View(nCustomers)
# Part b ####
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
# Part b ####
n = 1000 # simulation runs
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
n = 1000 # simulation runs
capacity = 15
price = seq(800,825,1)
names(price)=as.character(price)
nCustomers = rep(0,length(price))
for (i in 1:n){
# random customer's maximum price willig to pay
customer = runif(100)*1000
# for each price, sum the number of customer exceeding price and get the min of that
# and capacity
nCustomers=rbind(nCustomers,
sapply(colSums(sapply(price,function(x) customer>=x)),
function(x) min(x,capacity)))
}
# multiple # customers by price to get revenue for each price
revenue = as.matrix(price*colMeans(nCustomers[-1,]))
colnames(revenue)= "Revenue"
# find the price with max revenue
names(price)[which(max(revenue)==revenue)]
max(revenue)
plot(price,revenue, pch=16)
library(rJava)
library(rJava)
4/110
48/55
37/41
x = list()
x
x[1]=c("a","b")
x[[1]]=c("a","b")
x
x[[1]][1]
a1 = c(1, 2, 3, 4, 5)
a2 = c(6, 7, 8, 9, 10)
a3 = c(11, 12, 13, 14, 15)
aframe = data.frame(a1, a2, a3)
aframe
aframe[,1]
aframe[,"a1"]
aframe$a1
class(aframe[,1])
class(aframe[,"a1"])
class(aframe$a1)
aframe[["a1"]]
class(aframe[["a1"]])
aframe[[1]]
aframe[[1,1]]
aframe[[1,2]]
aframe[1,2]
x[1]
x
x[[1]]
x[1]
class(x[[1]])
class(x[1])
x[[2]]=c(1,2,3)
x
x[[2]]
class(x[[2]])
x[2]
class(x[2])
x[[3]]=2
x
P = cbind(c(.4,.2,.1),c(.6,0,0),c(0,.8,.9))
P
n = matrix(c(1000,0,0))
n
v = matrix(c(90,-10,-10))
v
t(n) %*% P
t(n) %*% P %*% P
t(n) %8% P %*% V
t(n) %*% P %*% V
t(n) %*% P %*% v
t(n) %*% P %*% P %*% v
t(n) %*% solve(diag(3)-P/1.2) %*% v
install.packages("Tabplot")
install.packages("tabplot")
install.packages("rattle")
library(rattel)
library(rattle)
rattle()
library(shiny)
install.packages("shiny")
library(shiny)
runExample("01_hello") # a histogram
# Lab session 4 exercise
##### Load data ##############################################################
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_411_Data_Visualization"
datafolder = "/Lab/Data/Lab 5 apps"
setwd(file.path(main,course, datafolder))
#the inputs for creating the data sample
rm(list=ls())
#setwd("/Users/jieyang/Desktop/2015_Spring/Data visulization/Jie/Dataset")
runApp("app1")
runApp("app2")
getwd()
# Lab session 4 exercise
##### Load data ##############################################################
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_411_Data_Visualization"
datafolder = "/Lab/Data/Lab 5 apps"
setwd(file.path(main,course, datafolder))
#the inputs for creating the data sample
rm(list=ls())
#setwd("/Users/jieyang/Desktop/2015_Spring/Data visulization/Jie/Dataset")
# Lab session 4 exercise
##### Load data ##############################################################
# My PC
main = "C:/Users/Steven/Documents/Academics/3_Graduate School/2014-2015 ~ NU/"
# Aginity
#main = "\\\\nas1/labuser169"
course = "MSIA_411_Data_Visualization"
datafolder = "/Lab/Data/Lab 5 apps"
setwd(file.path(main,course, datafolder))
#the inputs for creating the data sample
rm(list=ls())
#setwd("/Users/jieyang/Desktop/2015_Spring/Data visulization/Jie/Dataset")
runApp("app1")
runApp("app2")
